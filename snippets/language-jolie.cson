".source.iol":
  "OneWay (notification)":
    prefix: "oneway@Service"
    body: "${1:operationName}@${2:Service}( ${3:request} )"
  "OneWay (one way)":
    prefix: "oneway"
    body: "${1:operationName}( ${3:request} )"
  RequestResponse:
    prefix: "requestresponse"
    body: '''
      ${1:operationName}( ${2:request} )( ${3:response} ){
       $4
      }
    '''
  "RequestResponse@Service":
    prefix: "requestresponse@Service"
    body: "${1:operationName}@${2:ServiceName}( ${3:request} )( ${4:response} )"
  aggregates:
    prefix: "aggregates"
    body: "Aggregates: ${1:outputPortName}"
  constants:
    prefix: "constants"
    body: '''
      constants {
      	${1:constant} = ${2:value}
      }
    '''
  "cset (definition)":
    prefix: "cset"
    body: '''
      cset {
        ${1:correlationVariable}: ${2:alias}
      }
    '''
  csets:
    prefix: "csets"
    body: "csets.${1:correlationVariable}"
  define:
    prefix: "define"
    body: '''
      define ${1:procedure_name}
      {
        $2
      }
    '''
  "dynamic embedding":
    prefix: "embed"
    body: '''
      embedInfo.type = "${1:Language}";
      embedInfo.filepath = "${2:file_path}";
      loadEmbeddedService@Runtime( embedInfo )( ${3:PortName}.location );
    '''
  "else if":
    prefix: "elsi"
    body: '''
      else if ( ${1:condition} ) {
        $2
      }
    '''
  else:
    prefix: "el"
    body: '''
      else {
        $0
      }
    '''
  embedded:
    prefix: "embedded"
    body: '''
      embedded {
        ${1:Language}: "${2:file_path}" in ${3:PortName}
      }
    '''
  execution:
    prefix: "execution"
    body: "execution{ ${0:single|concurrent|sequential} }"
  "for (each)":
    prefix: "foreach"
    body: '''
      foreach (${1:child} : ${2:parent}) {
      	$3
      }
    '''
  for:
    prefix: "for"
    body: '''
      for (${1:ini}, ${2:cond}, ${3:afterthought}) {
        $4
      }
    '''
  global:
    prefix: "global"
    body: "global.${0:variable}"
  if:
    prefix: "if"
    body: '''
      if( ${1:condition} ) {
        $2
      }
    '''
  include:
    prefix: "include"
    body: "include \"${0:file}\""
  "init (scope)":
    prefix: "init"
    body: '''
      init
      {
        $0
      }
    '''
  inputPort:
    prefix: "inputPort"
    body: '''
      inputPort ${1:portName} {
      Location: $2
      Protocol: $3
      Interfaces: $4
      }
    '''
  "input-choice (RequestResponse)":
    prefix: "inputChoiceRequestResponse"
    body: '''
      [ ${1:operationName}( ${2:request} )( ${3:response} ) {
      	${4:beforeResponseCode}
      } ] {
      	${5:afterResponseCode}
      }
    '''
  "input-choice (OneWay)":
    prefix: "inputChoiceOneWay"
    body: '''
      [ ${1:operationName}( ${2:request} ) ] {
        $3
      }
    '''
  install:
    prefix: "install"
    body: "install( ${1:faultName} => ${2:faultCode} )"
  interface:
    prefix: "interface"
    body: '''
      interface ${1:interfaceName} {
        OneWay: $2
        RequestResponse: $3
      }
    '''
  "Internal Service":
    prefix: "service"
    body: '''
      service ${1:Name}
      {
      	Interfaces: ${2:Iface1,...}
      	main
      	{
      		${3:}
      	}
      }

    '''
  is_defined:
    prefix: "is_defined"
    body: "is_defined( ${0:variableName} )"
  "main (scope)":
    prefix: "main"
    body: '''
      main
      {
        $0
      }
    '''
  outputPort:
    prefix: "outputPort"
    body: '''
      outputPort ${1:portName} {
      	Location: $2
      	Protocol: $3
      	Interfaces: $4
      }
    '''
  print:
    prefix: "print"
    body: "println@Console( ${0:string} )()"
  "provide-until":
    prefix: "provide"
    body: '''
      [ provide
      	${0:provideInputChoice}
      until
      	${1:untilInputChoice}

    '''
  redirects:
    prefix: "redirects"
    body: "Redirects: ${1:resourceName} => ${2:outputPortName}"
  scope:
    prefix: "scope"
    body: '''
      scope( ${1:scopeName} )
      {
        $2
      }
    '''
  "socket (localhost)":
    prefix: "socket"
    body: "socket://${1:localhost}:${2:portNumber}"
  "spawn - parallel composition of output processes":
    prefix: "spawn"
    body: '''
      // N.B. the "in" clause is optional and eases
      // the retrieval of in-process local values. The local variable at
      // position i can be accessed by referring to the i-th element in
      // localVector variable. E.g., if in the spawn block process i sets
      // the value of local variable localVector.v, the value of v
      // is retrieved outside the spawn with localVector[i].v.
      spawn ( ${1:index} over ${2:integerExpression} ) ${3:in ${4:localVector}} {
        $5
      }
    '''
  synchronized:
    prefix: "synchronized"
    body: '''
      synchronized( ${1:token} ){
        $2
      }
    '''
  throw:
    prefix: "throw"
    body: "throw( ${1:error} )"
  throws:
    prefix: "throws"
    body: "throws ${1:faultName}( ${2:faultType} )"
  "type (basic)":
    prefix: "type"
    body: "type ${1:typeName}: ${2:basicType}"
  "type (nested)":
    prefix: "type"
    body: '''
      type ${1:typeName}: ${2:Type}{
        .${3:subNodeName}: ${4:type}
      }
    '''
  undef:
    prefix: "undef"
    body: "undef( ${0:variableName} )"
  while:
    prefix: "while"
    body: '''
      while( ${1:condition} ) {
      	$2
      }
    '''
  with:
    prefix: "with"
    body: '''
      with( ${1:parent} ){
        $2
      }
    '''
